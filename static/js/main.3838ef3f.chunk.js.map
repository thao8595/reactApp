{"version":3,"sources":["components/Question.js","components/Footer.js","components/Status.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","currentQuestion","quiz","currentQuestionIndex","id","question","answers","map","answer","index","key","type","name","defaultValue","onChange","onAnswer","bind","trueAns","htmlFor","style","display","displayResult","score","Footer","href","Status","className","totalQuestion","timeLeft","ANSWER_TIME","App","state","rightSound","Audio","wrongSound","this","length","setState","interval","setInterval","setTimeout","updateCurrentQuestion","progress","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3838ef3f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Question(props) {\n  const currentQuestion = props.quiz[props.currentQuestionIndex];\n\n  return (\n    <div>\n      <div id=\"question\">\n        <h2>{currentQuestion.question}</h2>\n\n        {currentQuestion.answers.map((answer, index) => (\n          <span key={index}>\n            <input\n              id={index}\n              type=\"radio\"\n              name=\"choices\"\n              defaultValue=\"choices-0\"\n              onChange={props.onAnswer.bind(\n                null,\n                answer,\n                currentQuestion.trueAns\n              )}\n            />\n\n            <label htmlFor={index}>{answer}</label>\n          </span>\n        ))}\n      </div>\n      {/* <button id=\"submit-button\" disabled>\n      Submit Answers\n    </button> */}\n\n      <div id=\"quiz-results\">\n        <p\n          id=\"quiz-results-message\"\n          style={{ display: props.displayResult }}\n        >\n          Đáp án đúng:\n          {currentQuestion.trueAns}\n        </p>\n        <p id=\"quiz-results-message\">\n          Score:\n          {props.score}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Question;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div>\n     \n\n      <footer>\n        © HTML template này cóp từ{\" \"}\n        <a href=\"https://codepen.io/phantomesse/full/YPrqLJ\">\n          Codepen của Lauren{\" \"}\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Status(props) {\n  return (\n    <div>\n      <h1 id=\"quiz-name\">My Quiz</h1>\n      <div className=\"flex \">\n        <div className=\"progress-bar\">\n          {props.currentQuestionIndex + 1}/{props.totalQuestion}\n        </div>\n        <h2 className=\"timeleft\">{props.timeLeft}s </h2>\n      </div>\n    </div>\n  );\n}\n\nexport default Status;\n","import React from \"react\";\nimport \"./App.css\";\nimport Question from \"./components/Question\";\nimport Footer from \"./components/Footer\";\nimport Status from \"./components/Status\";\n\nconst ANSWER_TIME = 10;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quiz: [\n        { question: \"1+1=?\", answers: [\"1\", \"2\", \"3\", \"4\"], trueAns: \"2\" },\n        {\n          question: \"Con gì kêu gâu gâu\",\n          answers: [\"Mèo\", \"Cún\", \"Dê\", \"Bò\"],\n          trueAns: \"Cún\"\n        },\n        {\n          question: \"Mặt trời mọc đằng nào\",\n          answers: [\"Tây\", \"Nam\", \"Đông\", \"Bắc\"],\n          trueAns: \"Đông\"\n        },\n        {\n          question:\n            \"Trong truyện về chú bé nói dối, tại sao sói ăn thịt đàn cừu\",\n          answers: [\n            \"Vì dân làng không tin cậu bé\",\n            \"Vì sói đói\",\n            \"Vì thịt cừu ngon\",\n            \"Em không biết\"\n          ],\n          trueAns: \"Em không biết\"\n        }\n      ],\n      timeLeft: ANSWER_TIME,\n      currentQuestionIndex: 0,\n      score: 0,\n      displayResult: \"none\"\n    };\n\n    this.rightSound = new Audio(\"../public/right.mp3\");\n    this.wrongSound = new Audio(\"../public/fail.mp3\");\n  }\n\n  updateCurrentQuestion() {\n    if (this.state.currentQuestionIndex < this.state.quiz.length - 1) {\n      this.setState(state => ({\n        currentQuestionIndex: state.currentQuestionIndex + 1\n      }));\n    } else {\n      this.setState({ timeLeft: 0 });\n    }\n\n    // TODO: Reset lại đáp án\n  }\n\n  ticking() {\n    this.interval = setInterval(() => {}, ANSWER_TIME * 1000);\n\n    if (this.state.timeLeft > 0) {\n      // đến 0 thì ngưng\n      this.setState(state => ({ timeLeft: state.timeLeft - 1 }));\n    } else {\n      this.setState(state => ({ timeLeft: ANSWER_TIME }));\n    }\n  }\n\n  onAnswer(answer, trueAns) {\n    // Hiển thị đáp án\n    this.setState(state => ({ displayResult: \"block\" }));\n\n    // Kiểm tra đáp án\n    if (answer === trueAns) {\n      this.setState(state => ({ score: state.score + 1 }));\n\n      // this.rightSound.play();\n    } else {\n      // this.wrongSound.play();\n    }\n\n    // Chuyển câu hỏi sau 2 giây\n    // TODO: Trong 2 giây này không cho phép chọn đáp án\n    setTimeout(() => {\n      this.updateCurrentQuestion();\n    }, 2000);\n  }\n\n  componentDidMount() {}\n\n  // componentWillMount() {\n  //   console.log('will mount')\n  //   clearInterval(this.interval);\n  // }\n\n  render() {\n    return (\n      <div id=\"quiz\">\n        <Status\n          updateCurrentQuestion={this.updateCurrentQuestion}\n          timeLeft={this.state.timeLeft}\n          totalQuestion={this.state.quiz.length}\n          currentQuestionIndex={this.state.currentQuestionIndex}\n          progress={this.state.progress}\n          score={this.state.score}\n        />\n        <Question\n          quiz={this.state.quiz}\n          currentQuestionIndex={this.state.currentQuestionIndex}\n          onAnswer={this.onAnswer.bind(this)}\n          score={this.state.score}\n          displayResult={this.state.displayResult}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}